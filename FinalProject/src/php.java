/* Generated By:JavaCC: Do not edit this line. php.java */
import Nodes.*;
public class php implements phpConstants {
  public static void main(String args []) throws ParseException {
    php parser = new php(System.in);

        TreeNode n = parser.Start();
        n.execute();
  }

  static final public BlockNode Start() throws ParseException {
  BlockNode bn=new BlockNode();
  StmtNode tn;
    jj_consume_token(START);
    label_1:
    while (true) {
      tn = Stmt();
                         bn.addChild(tn);
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(END);
    {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  static final public StringNode String2() throws ParseException {
  Token t;
  StringNode sn;
    jj_consume_token(Q);
    label_2:
    while (true) {
      t = jj_consume_token(STRING);
                        sn = new StringNode(t.image);
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
    }
    jj_consume_token(Q);
    {if (true) return sn;}
    throw new Error("Missing return statement in function");
  }

  static final public AssiNode VarAssi() throws ParseException {
  Token t1, t2=null, t3=null;
  AssiNode an= new AssiNode();
  StringNode sn1, sn2, sn3, sn4=null;
  ConstNode cn;
    t1 = jj_consume_token(VAR);
    if (jj_2_7(2)) {
      jj_consume_token(EQ);
      if (jj_2_3(2)) {
        sn4 = String2();
      } else if (jj_2_4(2)) {
        t2 = jj_consume_token(BOOL);
      } else if (jj_2_5(2)) {
        t3 = jj_consume_token(INT);
      } else if (jj_2_6(2)) {
        t2 = jj_consume_token(VAR);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    jj_consume_token(SEMICO);
    sn1= new StringNode(t1.image);
    an.addChild(sn1);

    if(sn4!=null) {
                an.addChild(sn4);
    }
    if(t2!=null) {
        sn2= new StringNode(t2.image);
                an.addChild(sn2);
    }
    if(t3!=null) {
        cn= new ConstNode(t3.image);
                an.addChild(cn);
    }
    {if (true) return an;}
    throw new Error("Missing return statement in function");
  }

  static final public ConcatNode concat() throws ParseException {
  ConcatNode con = new ConcatNode();
  StringNode sn=null, sn1, sn2;
  Token t1=null, t2=null;
  ConstNode cn;
    label_3:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(PLUS);
      if (jj_2_9(2)) {
        sn = String2();
      } else if (jj_2_10(2)) {
        t1 = jj_consume_token(VAR);
      } else if (jj_2_11(2)) {
        t2 = jj_consume_token(INT);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          if(sn!=null) {
                con.addChild(sn);
      }
      if(t1!=null) {
        sn1= new StringNode(t1.image);
        con.addChild(sn1);
      }
      if(t2!=null) {
        cn= new ConstNode(t2.image);
        con.addChild(cn);
      }
    }
    {if (true) return con;}
    throw new Error("Missing return statement in function");
  }

  static final public OutputNode Output() throws ParseException {
  OutputNode op = new OutputNode();
  Token t1=null, t2=null;
  StringNode sn=null,sn1;
  ConstNode cn;
  ConcatNode con;
    jj_consume_token(PRINT);
    if (jj_2_12(2)) {
      sn = String2();
      con = concat();
    } else if (jj_2_13(2)) {
      t1 = jj_consume_token(VAR);
      con = concat();
    } else if (jj_2_14(2)) {
      t2 = jj_consume_token(INT);
      con = concat();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICO);
    if(sn!=null) {
                op.addChild(sn);
    }
    if(t1!=null) {
        sn1= new StringNode(t1.image);
                op.addChild(sn1);
    }
    if(t2!=null) {
        cn= new ConstNode(t2.image);
                op.addChild(cn);
    }
    op.addChild(con);
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public IDNode IncDec() throws ParseException {
  Token t1,t2;
  StringNode sn1, sn2;
  IDNode idn = new IDNode();
    t1 = jj_consume_token(VAR);
    if (jj_2_15(2)) {
      t2 = jj_consume_token(INC);
    } else if (jj_2_16(2)) {
      t2 = jj_consume_token(DEC);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    sn1=new StringNode(t1.image);
    idn.addChild(sn1);
    sn2=new StringNode(t2.image);
    idn.addChild(sn2);
    {if (true) return idn;}
    throw new Error("Missing return statement in function");
  }

  static final public CondNode cond() throws ParseException {
  CondNode coon=new CondNode();
  Token t1, t2, t3=null, t4=null;
  StringNode sn1, sn2, sn3;
  ConstNode cn;
    t1 = jj_consume_token(VAR);
    t2 = jj_consume_token(CAL);
    if (jj_2_17(2)) {
      t3 = jj_consume_token(VAR);
    } else if (jj_2_18(2)) {
      t4 = jj_consume_token(INT);
    } else if (jj_2_19(2)) {
      t3 = jj_consume_token(BOOL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    sn1=new StringNode(t1.image);
    coon.addChild(sn1);
    sn2=new StringNode(t2.image);
    coon.addChild(sn2);
    if(t3!=null) {
          sn3=new StringNode(t3.image);
          coon.addChild(sn3);
    }
    if(t4!=null){
      cn=new ConstNode(t4.image);
          coon.addChild(cn);
    }
        {if (true) return coon;}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionNode condition() throws ParseException {
  ConditionNode cn = new ConditionNode();
  CondNode coon=null, coon2=null, cooon=null;
  Token t=null;
  StringNode sn;
    if (jj_2_21(2)) {
      cooon = cond();
    } else if (jj_2_22(2)) {
      jj_consume_token(OPENB);
      coon = cond();
      jj_consume_token(CLOSEB);
      label_4:
      while (true) {
        t = jj_consume_token(ANDOR);
        jj_consume_token(OPENB);
        coon2 = cond();
        jj_consume_token(CLOSEB);
        if (jj_2_20(2)) {
          ;
        } else {
          break label_4;
        }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(cooon!=null) {
          cn.addChild(cooon);
        }
        if(coon!=null) {
          cn.addChild(coon);
        }
        if(t!=null) {
          sn=new StringNode(t.image);
          cn.addChild(sn);
        }
        if(coon2!=null) {
          cn.addChild(coon2);
        }
        {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  static final public StmtNode Stmt() throws ParseException {
  StmtNode sn=new StmtNode();
  TreeNode tn;
    if (jj_2_23(2)) {
      tn = IfStmt();
    } else if (jj_2_24(2)) {
      tn = ForStmt();
    } else if (jj_2_25(2)) {
      tn = WhileStmt();
    } else if (jj_2_26(2)) {
      tn = SwitchStmt();
    } else if (jj_2_27(2)) {
      tn = DoWhileStmt();
    } else if (jj_2_28(2)) {
      tn = VarAssi();
    } else if (jj_2_29(2)) {
      tn = Output();
    } else if (jj_2_30(2)) {
      tn = IncDec();
      jj_consume_token(SEMICO);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    sn.addChild(tn);
    {if (true) return sn;}
    throw new Error("Missing return statement in function");
  }

  static final public IfNode IfStmt() throws ParseException {
  IfNode ifn= new IfNode();
  ElseifNode ein=null;
  ElseNode en=null;
  ConditionNode fcn;
  StmtNode sn;
    jj_consume_token(IF);
    jj_consume_token(OPENB);
    fcn = condition();
                                    ifn.addChild(fcn);
    jj_consume_token(CLOSEB);
    jj_consume_token(OPENZ);
    label_5:
    while (true) {
      sn = Stmt();
                                                                                           ifn.addChild(sn);
      if (jj_2_31(2)) {
        ;
      } else {
        break label_5;
      }
    }
    jj_consume_token(CLOSEZ);
    label_6:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_6;
      }
      ein = ElseifStmt();
                      ifn.addChild(ein);
    }
    if (jj_2_33(2)) {
      ElseStmt();
                                                           ifn.addChild(en);
    } else {
      ;
    }
    {if (true) return ifn;}
    throw new Error("Missing return statement in function");
  }

  static final public ElseifNode ElseifStmt() throws ParseException {
  ElseifNode ein = new ElseifNode();
  ConditionNode fcn;
  StmtNode sn;
    jj_consume_token(ELSEIF);
    jj_consume_token(OPENB);
    fcn = condition();
                                       ein.addChild(fcn);
    jj_consume_token(CLOSEB);
    jj_consume_token(OPENZ);
    label_7:
    while (true) {
      sn = Stmt();
                        ein.addChild(sn);
      if (jj_2_34(2)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(CLOSEZ);
    {if (true) return ein;}
    throw new Error("Missing return statement in function");
  }

  static final public ElseNode ElseStmt() throws ParseException {
  ElseNode en = new ElseNode();
  StmtNode sn;
    jj_consume_token(ELSE);
    jj_consume_token(OPENZ);
    label_8:
    while (true) {
      sn = Stmt();
                                 en.addChild(sn);
      if (jj_2_35(2)) {
        ;
      } else {
        break label_8;
      }
    }
    jj_consume_token(CLOSEZ);
    {if (true) return en;}
    throw new Error("Missing return statement in function");
  }

  static final public ForNode ForStmt() throws ParseException {
  ForNode fn=new ForNode();
  AssiNode an;
  CondNode cn;
  IDNode idn;
  StmtNode tn;
    jj_consume_token(FOR);
    jj_consume_token(OPENB);
    an = VarAssi();
    cn = cond();
    jj_consume_token(SEMICO);
    idn = IncDec();
    jj_consume_token(CLOSEB);
                                                                               fn.addChild(an); fn.addChild(cn); fn.addChild(idn);
    jj_consume_token(OPENZ);
    label_9:
    while (true) {
      tn = Stmt();
                         fn.addChild(tn);
      if (jj_2_36(2)) {
        ;
      } else {
        break label_9;
      }
    }
    jj_consume_token(CLOSEZ);
    {if (true) return fn;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileNode WhileStmt() throws ParseException {
  WhileNode wn=new WhileNode();
  ConditionNode con;
  StmtNode tn;
    jj_consume_token(WHILE);
    jj_consume_token(OPENB);
    con = condition();
                                       wn.addChild(con);
    jj_consume_token(CLOSEB);
    jj_consume_token(OPENZ);
    label_10:
    while (true) {
      tn = Stmt();
                         wn.addChild(tn);
      if (jj_2_37(2)) {
        ;
      } else {
        break label_10;
      }
    }
    jj_consume_token(CLOSEZ);
    {if (true) return wn;}
    throw new Error("Missing return statement in function");
  }

  static final public DowhileNode DoWhileStmt() throws ParseException {
  DowhileNode wn=new DowhileNode();
  ConditionNode con;
  StmtNode tn;
    jj_consume_token(DO);
    jj_consume_token(OPENZ);
    label_11:
    while (true) {
      tn = Stmt();
                               wn.addChild(tn);
      if (jj_2_38(2)) {
        ;
      } else {
        break label_11;
      }
    }
    jj_consume_token(CLOSEZ);
    jj_consume_token(WHILE);
    jj_consume_token(OPENB);
    con = condition();
    jj_consume_token(CLOSEB);
    jj_consume_token(SEMICO);
    wn.addChild(con);
    {if (true) return wn;}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchNode SwitchStmt() throws ParseException {
  SwitchNode sw = new SwitchNode();
  Token t=null;
  StringNode s;
  CaseNode  c;
  DefaultNode d;
    jj_consume_token(SWITCH);
    jj_consume_token(OPENB);
    t = jj_consume_token(VAR);
                                  s=new StringNode(t.image); sw.addChild(s);
    jj_consume_token(CLOSEB);
    jj_consume_token(OPENZ);
    label_12:
    while (true) {
      c = Case();
                         sw.addChild(c);
      if (jj_2_39(2)) {
        ;
      } else {
        break label_12;
      }
    }
    d = Default();
                                                           sw.addChild(d);
    jj_consume_token(CLOSEZ);
    {if (true) return sw;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseNode Case() throws ParseException {
  CaseNode can = new CaseNode();
  Token t=null ;
  StringNode sn=null;
  StmtNode stn;
  ConstNode cn;
    jj_consume_token(CASE);
    if (jj_2_40(2)) {
      t = jj_consume_token(INT);
    } else if (jj_2_41(2)) {
      sn = String2();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                        if(t!=null) { cn=new ConstNode(t.image); can.addChild(cn); } if(sn!=null) can.addChild(sn);
    jj_consume_token(D);
    label_13:
    while (true) {
      stn = Stmt();
                      can.addChild(stn);
      if (jj_2_42(2)) {
        ;
      } else {
        break label_13;
      }
    }
    jj_consume_token(BREAK);
    jj_consume_token(SEMICO);
    {if (true) return can;}
    throw new Error("Missing return statement in function");
  }

  static final public DefaultNode Default() throws ParseException {
  DefaultNode dn =new DefaultNode();
  StmtNode stn;
    jj_consume_token(DEF);
    jj_consume_token(D);
    label_14:
    while (true) {
      stn = Stmt();
                            dn.addChild(stn);
      if (jj_2_43(2)) {
        ;
      } else {
        break label_14;
      }
    }
   {if (true) return dn;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_3_38() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(OPENZ)) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(PRINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(OPENB)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(OPENB)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(OPENB)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(PLUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(OPENZ)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(CAL)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(OPENB)) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(VAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICO)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(ANDOR)) return true;
    if (jj_scan_token(OPENB)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(OPENB)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(VAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(INT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(Q)) return true;
    Token xsp;
    if (jj_3_2()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(OPENB)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public phpTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[43];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public php(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public php(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new phpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public php(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new phpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public php(phpTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(phpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 43; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
